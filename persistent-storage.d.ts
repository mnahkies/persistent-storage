// Generated by dts-bundle v0.4.3

declare module 'persistent-storage' {
    import PersistentStorage = require('persistent-storage/PersistentStorage');
    export = PersistentStorage;
}

declare module 'persistent-storage/PersistentStorage' {
    import I = require('persistent-storage/interfaces');
    /**
        * Constructs a new PersistentStorage instead
        * @param opts
        * @param {boolean=false} opts.useCompression
        * @param {string=} opts.keyPrefix
        * @param opts.storageBackend
        * @constructor
        */
    class PersistentStorage {
            constructor(opts: I.Config);
            static generateSalt(lengthBytes: number): string;
            static generateIV(lengthBytes: number): Buffer;
            length: number;
            /**
                * Sets a value in the persistent storage
                * @param {string} key - Key to associate this value with
                * @param {*} value - Value to store, if undefined will delete the given key
                */
            setItem(key: string, value: any): void;
            /**
                * Gets a value from the persistant storage, uses in memory cache if possible
                * @param {string} key - Key to retrieve
                * @returns {*}
                */
            getItem(key: string): any;
            /**
                * Gets the nth key in the store, note that the order of keys is not guaranteed but
                * will be consistent so long as the key set stays the same.
                * @param {number} n
                * @returns {string}
                */
            key(n: number): string;
            /**
                * Gets an array of the keys in the store
                * @returns {string[]}
                */
            keys(): string[];
            /**
                * Removes an item from the store
                * @param {string} key
                */
            removeItem(key: string): void;
            /**
                * Clears all items from the store
                */
            clear(): void;
            /**
                * Clears all items from the cache
                */
            purgeCache(): void;
    }
    export = PersistentStorage;
}

declare module 'persistent-storage/interfaces' {
    export interface Config {
            /**
                * Enables seamless compression of stored values using lz-string
                * defaults to false
                */
            useCompression?: boolean;
            /**
                * Enables write-through caching of values
                * defaults to true
                */
            useCache?: boolean;
            /**
                * Scopes the instance to prefix keys by given value, the prefix
                * should not be included when performing get or set operations
                * defaults to '' (no scoping)
                */
            keyPrefix?: string;
            /**
                * The storage backend to use. Can be any object that implements the Storage
                * interface specified here https://w3c.github.io/webstorage/#storage-0
                */
            storageBackend?: Storage;
            /**
                * Passing this object enables seamless encryption of values using
                * the node crypto module (or browserify-crypto if used with browserify)
                *
                * See node crypto / openssh documentation for details of alternative
                * algorithms, digest and more detailed information about the values
                * required.
                *
                */
            encryption?: {
                    /**
                        * specifies the encryption algorithm to use
                        * defaults to aes-256-cbc
                        */
                    algorithm?: string;
                    /**
                        * enables encryption of the keys as well as values
                        * defaults to true
                        */
                    encryptKeys?: boolean;
                    /**
                        * specifies the password to use for encryption key derivation
                        */
                    password: string;
                    /**
                        * specifies the initialisation vector to use, should be of suitable length
                        * for chosen algorithm (aes-256-cbc requires 16 bytes)
                        */
                    iv: Buffer;
                    /**
                        * specifies the salt to use
                        */
                    salt?: string;
                    /**
                        * specifies the number of iterations to use during key derivation, higher values
                        * are more secure but give slower initialisation
                        * defaults to 10
                        */
                    iterations?: number;
                    /**
                        * specifies the number of bytes for the derived key length, must suit chosen algorithm
                        * defaults to 16 (correct length for aes-256-cbc)
                        */
                    derivedKeyLength?: number;
                    /**
                        * specifies hash used to derive key
                        * defaults to sha512
                        */
                    digest?: string;
            };
    }
}

